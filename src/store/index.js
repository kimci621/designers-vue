import Vue from 'vue'
import Vuex from 'vuex'

Vue.use(Vuex)

const moduleA = {
  /*
  Действия и мутации внутри модулей по умолчанию регистрируются в глобальном пространстве имён — это позволяет нескольким модулям реагировать на один и тот же тип действий/мутаций. Геттеры также по умолчанию регистрируются в глобальном пространстве имён. Однако, в настоящее время у этого нет функционального значения (так сделано во избежание кардинальных изменений). Поэтому следует быть осторожным, чтобы не определить два геттера с одинаковыми именами в разных модулях, что приведёт к ошибкам.
  */
  state: () => ({}),
  mutations: {},
  actions: {
    //Аналогично, context.state в действиях также указывает на локальное состояние модуля, а корневое — доступно в context.rootState:
    incrementIfOddOnRootSum({ state, commit, rootState }) {
      if ((state.count + rootState.count) % 2 === 1) {
        commit('increment');
      }
    }
  },
  getters: {
    //Кроме того, в геттеры корневое состояние передаётся 3-м параметром:
    sumWithRootCount(state, getters, rootState) {
      return state.count + rootState.count;
    }
  }
}

const moduleB = {
  state: () => ({}),
  mutations: {},
  actions: {}
}

export default new Vuex.Store({
  state: {
    count: 0,
    categories: {
      first: [
        {
          name: "Женщины",
          second: [
            {
              name: "Второй столбик Женщины1",
              third: [
                { name: "Третий столбик женщины1" },
                { name: "Третий столбик женщины1" },
                { name: "Третий столбик женщины1" },
                { name: "Третий столбик женщины1" },
                { name: "Третий столбик женщины1" },
                { name: "Третий столбик женщины1" },
                { name: "Третий столбик женщины1" },
                { name: "Третий столбик женщины1" },
                { name: "Третий столбик женщины1" },
                { name: "Третий столбик женщины1" },
                { name: "Третий столбик женщины1" },
                { name: "Третий столбик женщины1" },
              ],
            },
            {
              name: "Второй столбик Женщины2",
              third: [
                { name: "Третий столбик женщины2" },
                { name: "Третий столбик женщины2" },
                { name: "Третий столбик женщины2" },
                { name: "Третий столбик женщины2" },
                { name: "Третий столбик женщины2" },
                { name: "Третий столбик женщины2" },
                { name: "Третий столбик женщины2" },
                { name: "Третий столбик женщины2" },
                { name: "Третий столбик женщины2" },
                { name: "Третий столбик женщины2" },
                { name: "Третий столбик женщины2" },
                { name: "Третий столбик женщины2" },
              ],
            },
            {
              name: "Второй столбик Женщины3",
              third: [

              ],
            },
            {
              name: "Второй столбик Женщины4",
              third: [
                { name: "Третий столбик женщины4" },
                { name: "Третий столбик женщины4" },
                { name: "Третий столбик женщины4" },
                { name: "Третий столбик женщины4" },
                { name: "Третий столбик женщины4" },
                { name: "Третий столбик женщины4" },
                { name: "Третий столбик женщины4" },
                { name: "Третий столбик женщины4" },
                { name: "Третий столбик женщины4" },
                { name: "Третий столбик женщины4" },
                { name: "Третий столбик женщины4" },
                { name: "Третий столбик женщины4" },
              ],
            },
          ],
        },
        {
          name: "Мужчины",
          second: [
            {
              name: "Второй столбик Мужчины1",
              third: [
                { name: "Третий столбик мужчины1" },
                { name: "Третий столбик мужчины1" },
                { name: "Третий столбик мужчины1" },
                { name: "Третий столбик мужчины1" },
                { name: "Третий столбик мужчины1" },
                { name: "Третий столбик мужчины1" },
              ],
            },
            {
              name: "Второй столбик Мужчины2",
              third: [
                { name: "Третий столбик мужчины2" },
                { name: "Третий столбик мужчины2" },
                { name: "Третий столбик мужчины2" },
                { name: "Третий столбик мужчины2" },
                { name: "Третий столбик мужчины2" },
                { name: "Третий столбик мужчины2" },
                { name: "Третий столбик мужчины2" },
                { name: "Третий столбик мужчины2" },
                { name: "Третий столбик мужчины2" },
                { name: "Третий столбик мужчины2" },
                { name: "Третий столбик мужчины2" },
                { name: "Третий столбик мужчины2" },
                { name: "Третий столбик мужчины2" },
                { name: "Третий столбик мужчины2" },
              ],
            },
            {
              name: "Второй столбик Мужчины3",
              third: [
                { name: "Третий столбик мужчины3" },
                { name: "Третий столбик мужчины3" },
                { name: "Третий столбик мужчины3" },
                { name: "Третий столбик мужчины3" },
                { name: "Третий столбик мужчины3" },
                { name: "Третий столбик мужчины3" },
                { name: "Третий столбик мужчины3" },
                { name: "Третий столбик мужчины3" },
                { name: "Третий столбик мужчины3" },
                { name: "Третий столбик мужчины3" },
                { name: "Третий столбик мужчины3" },
                { name: "Третий столбик мужчины3" },
                { name: "Третий столбик мужчины3" },
                { name: "Третий столбик мужчины3" },
              ],
            },
            {
              name: "Второй столбик Мужчины4",
              third: [
                { name: "Третий столбик мужчины4" },
                { name: "Третий столбик мужчины4" },
                { name: "Третий столбик мужчины4" },
                { name: "Третий столбик мужчины4" },
                { name: "Третий столбик мужчины4" },
                { name: "Третий столбик мужчины4" },
                { name: "Третий столбик мужчины4" },
                { name: "Третий столбик мужчины4" },
                { name: "Третий столбик мужчины4" },
                { name: "Третий столбик мужчины4" },
                { name: "Третий столбик мужчины4" },
                { name: "Третий столбик мужчины4" },
                { name: "Третий столбик мужчины4" },
                { name: "Третий столбик мужчины4" },
              ],
            },
          ],
        },
        {
          name: "Дети",
          second: [
            {
              name: "Второй столбик Дети1",
              third: [
                { name: "Третий столбик дети1" },
                { name: "Третий столбик дети1" },
                { name: "Третий столбик дети1" },
                { name: "Третий столбик дети1" },
                { name: "Третий столбик дети1" },
                { name: "Третий столбик дети1" },
                { name: "Третий столбик дети1" },
                { name: "Третий столбик дети1" },
                { name: "Третий столбик дети1" },
                { name: "Третий столбик дети1" },
                { name: "Третий столбик дети1" },
                { name: "Третий столбик дети1" },
              ],
            },
            {
              name: "Второй столбик Дети2",
              third: [
                { name: "Третий столбик дети2" },
                { name: "Третий столбик дети2" },
                { name: "Третий столбик дети2" },
                { name: "Третий столбик дети2" },
                { name: "Третий столбик дети2" },
                { name: "Третий столбик дети2" },
                { name: "Третий столбик дети2" },
                { name: "Третий столбик дети2" },
                { name: "Третий столбик дети2" },
                { name: "Третий столбик дети2" },
                { name: "Третий столбик дети2" },
                { name: "Третий столбик дети2" },
              ],
            },
            {
              name: "Второй столбик Дети3",
              third: [
                { name: "Третий столбик дети3" },
                { name: "Третий столбик дети3" },
                { name: "Третий столбик дети3" },
                { name: "Третий столбик дети3" },
                { name: "Третий столбик дети3" },
                { name: "Третий столбик дети3" },
                { name: "Третий столбик дети3" },
                { name: "Третий столбик дети3" },
                { name: "Третий столбик дети3" },
                { name: "Третий столбик дети3" },
                { name: "Третий столбик дети3" },
                { name: "Третий столбик дети3" },
              ],
            },
            {
              name: "Второй столбик Дети4",
              third: [
                { name: "Третий столбик дети4" },
                { name: "Третий столбик дети4" },
                { name: "Третий столбик дети4" },
                { name: "Третий столбик дети4" },
                { name: "Третий столбик дети4" },
                { name: "Третий столбик дети4" },
                { name: "Третий столбик дети4" },
                { name: "Третий столбик дети4" },
                { name: "Третий столбик дети4" },
                { name: "Третий столбик дети4" },
                { name: "Третий столбик дети4" },
                { name: "Третий столбик дети4" },
              ],
            },
          ],
        },
      ],
    },
  },
  getters: {
    //getter нужен для получения данных из state или для вычисления
    //getter вторым аргуметом может принять другой getter
    // doneTodosCount: (state, getters) => {
    //   return getters.doneTodos.length;
    // }
    count: (state, getters) => {
      return state.count;
    },
    categories: (state) => {
      return state.categories;
    }
    //Геттеры получаем из computed
    // computed: {
    //   doneTodosCount () {
    //     return this.$store.state.todos.filter(todo => todo.done).length
    //   }
    // }
  },
  mutations: {
    //мутация единственный метод изменения state
    // Чтобы инициировать обработку мутации, необходимо вызвать store.commit, указав её тип:
    // store.commit('incementCount'); - название функции-мутации
    incrementCount(state) {
      state.count++;
    },
    // При вызове store.commit в мутацию можно также передать дополнительный параметр, называемый нагрузкой (payload):
    // store.commit('incrementWithPayload', payload);
    incrementWithPayload(state, n) {
      state.count += n;
    }
    //В мутациях нельзя испольнять асинхронные операции, поэтому используются Actions
  },
  actions: {
    // Вместо того, чтобы напрямую менять состояние, action инициируют мутации;
    // Actions могут использоваться для асинхронных операций.
    // Обработчики действий получают объект контекста(context), содержащий те же методы и свойства, что и сам экземпляр хранилища(store)
    // Однако, этот контекст — не то же самое, что экземпляр хранилища.
    incrementAction(context) {
      context.commit('incrementCount');
    },
    // На практике для упрощения кода часто используется деструктуризация аргументов
    incrementActionwithDestruct({ commit }) {
      commit('incrementCount')
    },
    // Action запускаются методом store.dispatch:
    //      store.dispatch('increment');
    // В action можно испольнять асинхронные действия, в отличии от мутаций
    incrementActionAsync({ commit }) {
      setTimeout(() => {
        commit('incrementCount')
      }, 1000)
    },
    //В action так же передается payload 
    /*
            store.dispatch('incrementAsync', {
              amount: 10
            });
    */
    //store.dispatch может обрабатывать Promise, возвращаемый обработчиком действия, и также возвращает Promise:
    actionA({ commit }) {
      return new Promise((resolve, reject) => {
        setTimeout(() => {
          commit('someMutation')
          resolve()
        }, 1000)
      })
    },
    // Теперь сожно сделать так:
    // store.dispatch('actionA').then((res) => {
    //   // res.code
    // });
    //А в другом action так:
    actionB({ dispatch, commit }) {
      return dispatch('actionA').then(() => {
        commit('someOtherMutation')
      })
    }
    //async/await приветствуется
  },
  modules: {
    // По мере роста и масштабировании приложения, хранилище может существенно раздуться.
    // Чтобы помочь в этой беде, Vuex позволяет разделять хранилище на модули. Каждый модуль может содержать собственное состояние, мутации, действия, геттеры и даже встроенные подмодули:
    a: moduleA,
    b: moduleB
  }
})

/*
Vuex.mapState - Для множественного импортирования состояний
Когда компонент должен использовать множество свойств или геттеров хранилища, объявлять все эти вычисляемые свойства может быть утомительно. В таких случаях можно использовать функцию mapState, которая автоматически генерирует вычисляемые свойства:
// В полной сборке функция доступна через Vuex.mapState
import { mapState } from 'vuex';

export default {
  // ...
  computed: mapState({
    // стрелочные функции могут сделать код очень кратким
    count: state => state.count,

    // передача строки 'count' аналогична записи `state => state.count`
    countAlias: 'count',

    // для доступа к локальному состоянию через `this`,
    // необходимо использовать обычную функцию
    countPlusLocalState(state) {
      return state.count + this.localCount;
    }
  })
};
-----------------------------------------------------------------------------------------
Вспомогательная функция mapGetters
Функция mapGetters просто проксирует геттеры хранилища в локальные вычисляемые свойства компонента:

import { mapGetters } from 'vuex';

export default {
  // ...
  computed: {
    // смешиваем результат mapGetters с внешним объектом computed
    ...mapGetters([
      'doneTodosCount',
      'anotherGetter'
      // ...
    ])
  }
};
--------------------------------------------------------------------------------------------------
Мутации следуют правилам реактивности Vue
Поскольку состояние хранилища Vuex — это реактивная переменная Vue, при возникновении мутации зависящие от этого состояния компоненты Vue обновляются автоматически. Кроме того, это значит, что мутации Vuex имеют те же самые подводные камни, что и реактивность в обычном Vue:

Лучше инициализировать изначальное состояние хранилища, указав все поля в самом начале.

При добавлении новых свойств объекту необходимо либо:

Использовать Vue.set(obj, 'newProp', 123), или

Целиком заменить старый объект новым. Например, используя синтаксис расширения объектов (opens new window)можно написать так:

state.obj = { ...state.obj, newProp: 123 };
---------------------
Использование констант для обозначения типов мутаций
В различных вариантах реализации Flux этот подход используется весьма часто. Вынесите все константы с типами мутаций и действий в отдельный файл, чтобы было проще использовать линтеры и другие инструменты, а также чтобы дать читателям возможность с первого взгляда понять, какие мутации возможны в приложении:

// mutation-types.js
export const SOME_MUTATION = 'SOME_MUTATION';
// store.js
import Vuex from 'vuex'
import { SOME_MUTATION } from './mutation-types'

const store = new Vuex.Store({
  state: { ... },
  mutations: {
    // "вычисляемые имена" из ES2015 позволяют использовать
    // константу в качестве имени функции
    [SOME_MUTATION] (state) {
      // здесь будет изменяться состояние
    }
  }
})
Тем не менее, использовать константы для указания типов мутаций совершенно необязательно, хотя это и может оказаться полезным в крупных проектах.
--------------------------------------------------------------------------------------------------------------
Диспатчить action в компонентах можно при помощи 
  this.$store.dispatch('xxx') 
или используя вспомогательную функцию mapActions, создающую локальные псевдонимы для действий в виде методов компонента (требуется наличие корневого $store):

import { mapActions } from 'vuex'

export default {
  // ...
  methods: {
    ...mapActions([
      'increment' // проксирует `this.increment()` в `this.$store.dispatch('increment')`

      // `mapActions` также поддерживают нагрузку (payloads):
      'incrementBy' // проксирует `this.incrementBy(amount)` в `this.$store.dispatch('incrementBy', amount)`
    ]),
    ...mapActions({
      add: 'increment' // проксирует `this.add()` в `this.$store.dispatch('increment')`
    })
  }
};
*/